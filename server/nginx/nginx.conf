events {
    worker_connections 1024;
}

http {
    upstream user-service {
        server user-service:8001;
    }

    upstream news-service {
        server news-service:8002;
    }

    upstream payment-service {
        server payment-service:8003;
    }

    upstream authentication-service {
        server authentication-service:8000;
    }

    server {
        listen 80;

        # CORS Headers
        set $cors_origin "*"; # Change this to restrict domains if needed
        set $cors_methods "GET, POST, PUT, DELETE, OPTIONS";
        set $cors_headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";

        # Authentication verification endpoint
        location = /auth-verify {
            internal;
            proxy_pass http://authentication-service/api/v1/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

        location /api/v1/auth/ {
            proxy_pass http://authentication-service;
            include cors.conf;
        }

        location /api/v1/news/ {
            proxy_pass http://news-service;
            include cors.conf;
        }

        location /api/v1/subscription/ {
            # Skip auth for OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
                add_header 'Access-Control-Allow-Methods' "$cors_methods" always;
                add_header 'Access-Control-Allow-Headers' "$cors_headers" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Require authentication for non-OPTIONS requests
            auth_request /auth-verify;
            
            # Forward the user details from auth response to the payment service
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_email $upstream_http_x_user_email;
            
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Email $user_email;
            
            # Handle auth errors
            error_page 401 = @error401;
            
            proxy_pass http://payment-service;
            include cors.conf;
        }

        location /api/v1/user/ {
            # Skip auth for OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
                add_header 'Access-Control-Allow-Methods' "$cors_methods" always;
                add_header 'Access-Control-Allow-Headers' "$cors_headers" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            # Require authentication for non-OPTIONS requests
            auth_request /auth-verify;

            # Forward the user details from auth response to the payment service
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_email $upstream_http_x_user_email;
            
            proxy_set_header X-User-Id $user_id;
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Email $user_email;
            
            # Handle auth errors
            error_page 401 = @error401;
            
            proxy_pass http://user-service;
            include cors.conf;
        }

        # Error handler for 401 unauthorized
        location @error401 {
            add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
            add_header 'Access-Control-Allow-Methods' "$cors_methods" always;
            add_header 'Access-Control-Allow-Headers' "$cors_headers" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Type' 'application/json';
            return 401 '{"error": "Authentication required", "message": "Please login to access this service"}';
        }

        # Handle other requests
        location / {
            # Default handler can stay as is
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
                add_header 'Access-Control-Allow-Methods' "$cors_methods" always;
                add_header 'Access-Control-Allow-Headers' "$cors_headers" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain';
                return 204;
            }
        }
    }
}